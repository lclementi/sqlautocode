
# Nice print stuff
TAB = 12*' '

NLTAB = ',\n'+TAB

USAGE = """usage: autoload.py [options]

Generates python code for a given database schema.

options:
    -h, --help                      Show this help
    -u URL,         --url URL       Database url (e.g.: postgres://postgres:user@password/Database)
    -o FILE,        --output FILE   Where to put the output (default is stdout)
    -s NAME,        --schema NAME   Name of the schema to output (default is 'default')
    -t T1,T2,.. ,   --tables T1,T2  Name of tables to inspect (default is 'all').
                                    Support globbing character to select more tables.
                                    ex.: -t Download* will generate a model for all tables starting with Download

    -i              --noindex       Do not generate index information
    -e              --example       Generate code with examples how to access data
    -3              --z3c           Generate code for use with z3c.sqlalchemy
"""

HEADER = """
## File autogenerated by autoload.py
## see http://www.sqlalchemy.org/trac/wiki/UsageRecipes/AutoCode

from sqlalchemy import *
metadata = MetaData()
"""

HEADER_Z3C = """
## File autogenerated by autoload.py
## see http://www.sqlalchemy.org/trac/wiki/UsageRecipes/AutoCode
## Export type: z3c.sqlalchemy

from sqlalchemy import *

from z3c.sqlalchemy import Model
from z3c.sqlalchemy.mapper import MappedClassBase

def getModel(metadata):
    model = Model()
"""

FOOTER_Z3C = """
    return model
"""

FOOTER_EXAMPLE = """
# some example usage
if __name__ == '__main__':
    url = '%(url)s'
    dburl = engine.url.make_url(url)
    db = create_engine(url)
    metadata = BoundMetaData(db)

    # set metadata for %(tablename)s
    %(tablename)s._metadata = metadata
    
    # fetch first item from %(tablename)s
    s = %(tablename)s.select()
    rs = s.execute()
    for row in rs:
        print row
"""


SQLITE_MASTER = """
CREATE TABLE sqlite_master (
  type TEXT,
  name TEXT,
  tbl_name TEXT,
  rootpage INTEGER,
  sql TEXT
);"""


TABLE = """ Table('%(name)s', metadata,
    %(columns)s,
    %(constraints)s
    %(index)s
    %(schema)s
    )
"""

TABLE_WO_INDEX = """ Table('%(name)s', metadata,
    %(columns)s,
    %(constraints)s
    %(schema)s
    )
"""

COLUMN = """Column(%(name)r, %(type)s, %(constraints)s %(args)s)"""

FOREIGN_KEY = """ForeignKeyConstraint(%(names)s, %(specs)s, name=%(name)s)"""

INDEX = """Index(%(name)r, %(columns)s, unique=%(unique)s)"""
    
